package com.dzz.medical.config.web.security;import com.dzz.medical.common.Constants;import com.google.common.base.Strings;import java.util.HashSet;import java.util.Set;import org.apache.commons.codec.digest.Md5Crypt;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.authentication.AuthenticationProvider;import org.springframework.security.authentication.BadCredentialsException;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;import org.springframework.security.core.Authentication;import org.springframework.security.core.AuthenticationException;import org.springframework.security.core.GrantedAuthority;import org.springframework.security.core.authority.SimpleGrantedAuthority;import org.springframework.security.core.userdetails.UsernameNotFoundException;import org.springframework.stereotype.Component;/** * 自定义用户认证 * * @author dzz * @since  2017年06月19 下午5:23 * @version  1.0.0 */@Componentpublic class MyAuthenticationProvider implements AuthenticationProvider{    @Autowired    private MyUserDetailsService userDetailsService;    @Override    public Authentication authenticate(Authentication authentication) throws AuthenticationException {        String userName = authentication.getName();        if (Strings.isNullOrEmpty(userName)) {            throw new UsernameNotFoundException("请填写用户名");        }        MyUserDetails user =  (MyUserDetails) userDetailsService.loadUserByUsername(userName);        if(user == null){            throw new UsernameNotFoundException("用户不存在");        }        if(user.getStatus()!=1){            throw new UsernameNotFoundException("用户已被注销");        }        /*密码认证*/        String password = (String) authentication.getCredentials();        password = Md5Crypt.md5Crypt(password.getBytes(), Constants.getSaltValue(user.getUsername()));        if (!password.equals(user.getPassword())) {            throw new BadCredentialsException("用户名或密码错误");        }       /* 组装权限URL放入权限列表*/        Set<GrantedAuthority> authorities = new HashSet<>();        /*角色权限信息*/        authorities.add(new SimpleGrantedAuthority("ROLE_USER"));        return new UsernamePasswordAuthenticationToken(user, password, authorities);    }    @Override    public boolean supports(Class<?> aClass) {        return true;    }}
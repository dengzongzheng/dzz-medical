package com.dzz.medical.config.web.security;import com.dzz.medical.common.response.ResponseDzz;import com.dzz.medical.controller.system.common.constant.Constants;import com.dzz.medical.controller.system.domain.bo.PermitBO;import com.dzz.medical.controller.system.domain.bo.SystemUserDetailsBO;import com.dzz.medical.controller.system.service.BsAdminUserService;import com.google.common.base.Strings;import java.util.HashSet;import java.util.List;import java.util.Set;import java.util.stream.Collectors;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.authentication.AuthenticationProvider;import org.springframework.security.authentication.BadCredentialsException;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;import org.springframework.security.core.Authentication;import org.springframework.security.core.AuthenticationException;import org.springframework.security.core.GrantedAuthority;import org.springframework.security.core.authority.SimpleGrantedAuthority;import org.springframework.security.core.userdetails.UsernameNotFoundException;import org.springframework.stereotype.Component;/** * 自定义用户认证 * * @author dzz * @since  2017年06月19 下午5:23 * @version  1.0.0 */@Componentpublic class SelfAuthenticationProvider implements AuthenticationProvider{    @Autowired    private SelfUserDetailsService userDetailsService;    @Autowired    private BsAdminUserService bsAdminUserService;    @Override    public Authentication authenticate(Authentication authentication) throws AuthenticationException {        String userName = authentication.getName();        if (Strings.isNullOrEmpty(userName)) {            throw new UsernameNotFoundException("请填写用户名");        }        SystemUserDetailsBO user =  (SystemUserDetailsBO) userDetailsService.loadUserByUsername(userName);        if(user == null){            throw new UsernameNotFoundException("用户不存在");        }        if(user.getStatus()!=1){            throw new UsernameNotFoundException("用户已被注销");        }        /*密码认证*/        String password = (String) authentication.getCredentials();        ResponseDzz<Boolean> booleanResponseBzn = bsAdminUserService                .checkPassword(password, user.getUserAccount(), user.getPassword());        if (booleanResponseBzn.checkFail() || !booleanResponseBzn.getData()) {            throw new BadCredentialsException("用户名或密码错误");        }        /*存入用户菜单信息*/        if (Constants.SUPPER_ADMIN_ROLE_TYPE.equals(user.getRoleType())) {            ResponseDzz<List<PermitBO>> responseBzn = bsAdminUserService.selectSupperAdminAuthorize();            user.setAdminPermitList(responseBzn.getData());        }else{            ResponseDzz<List<PermitBO>> responseBzn = bsAdminUserService.selectAuthorizeByUserId(user.getUserId());            if (responseBzn.checkFail() || null == responseBzn.getData()) {                throw new BadCredentialsException("该用户未被授权，请联系管理员.");            }            user.setAdminPermitList(responseBzn.getData());        }       /* 组装权限URL放入权限列表*/        Set<GrantedAuthority> authorities = new HashSet<>();        user.getAdminPermitList().stream().filter(adminMenuPermit ->                !Strings.isNullOrEmpty(adminMenuPermit.getUrl())).collect(Collectors.toList())                .forEach(adminMenuPermit -> {                    authorities.add(new SimpleGrantedAuthority(adminMenuPermit.getUrl()));});        /*角色权限信息*/        authorities.add(new SimpleGrantedAuthority("ROLE_USER"));        return new UsernamePasswordAuthenticationToken(user, password, authorities);    }    @Override    public boolean supports(Class<?> aClass) {        return true;    }}
package com.dzz.medical.controller.util.controller;import com.alibaba.fastjson.JSONObject;import com.dzz.medical.controller.system.domain.bo.PermitBO;import com.dzz.medical.controller.system.domain.bo.SystemUserDetailsBO;import com.google.common.base.Strings;import com.google.common.collect.Maps;import java.beans.PropertyEditorSupport;import java.security.Principal;import java.text.ParseException;import java.text.SimpleDateFormat;import java.time.LocalDateTime;import java.time.format.DateTimeFormatter;import java.time.temporal.ChronoUnit;import java.util.Date;import java.util.List;import java.util.Map;import javax.servlet.http.HttpServletRequest;import lombok.extern.slf4j.Slf4j;import org.apache.commons.lang3.StringUtils;import org.springframework.security.core.context.SecurityContextHolder;import org.springframework.security.core.userdetails.UserDetails;import org.springframework.validation.BindingResult;import org.springframework.validation.FieldError;import org.springframework.web.bind.WebDataBinder;import org.springframework.web.bind.annotation.InitBinder;/** * controller 公共 * * @author dzz * @version 1.0.0 * @since 2017年06月15 下午7:58 */@Slf4jpublic abstract class BaseController {    /**     * 获取访者IP     *     * @param request request     * @return IP     */    protected String getRequestIP(HttpServletRequest request) {        return request.getRemoteAddr();    }    /**     * 绑定日期类型解码     *     * @param binder WebDataBinder     */    @InitBinder    public void initBinder(WebDataBinder binder) {        binder.registerCustomEditor(Date.class, new DateEditor());    }    private class DateEditor extends PropertyEditorSupport {        @Override        public void setAsText(String text) {            Date date = null;            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");            try {                if (!StringUtils.isEmpty(text)) {                    date = format.parse(text);                }            } catch (ParseException e) {                log.error("日期类型转换异常", e);            }            setValue(date);        }    }    /**     * 取当前登录用户信息     *     * @return 用户名     */    protected String getUserName() {        Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();        String userName = "";        if (principal instanceof UserDetails) {            userName = ((UserDetails) principal).getUsername();        }        if (principal instanceof Principal) {            userName = ((Principal) principal).getName();        }        return userName;    }    /**     * 获取用户Account     * @return 用户Id     */    protected String getUserAccount() {        Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();        if (principal instanceof SystemUserDetailsBO) {            return ((SystemUserDetailsBO) principal).getUserAccount();        }        return null;    }    /**     * 获取用户Id     * @return 用户Id     */    protected String getUserId() {        Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();        if (principal instanceof SystemUserDetailsBO) {            return ((SystemUserDetailsBO) principal).getUserId();        }        return null;    }    /**     * 获取用户部门Id     * @return 用户部门Id     */    protected String getUserDepartmentId() {        Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();        if (principal instanceof SystemUserDetailsBO) {            return ((SystemUserDetailsBO) principal).getDepartmentId();        }        return null;    }    /**     * 获取用户角色类型     * @return 用户角色类型     */    protected Integer getUserRoleType(){        Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();        if (principal instanceof SystemUserDetailsBO) {            return ((SystemUserDetailsBO) principal).getRoleType();        }        return null;    }    /**     * 混淆邮箱     * @param email email     * @return 混淆邮箱     */    protected String getEmailString(String email){        String result="";        if (!Strings.isNullOrEmpty(email)) {            String[] str=email.split("@");            String strPrefix=str[0].substring(0,1);            int len=str[0].length()-1;            String innerText="";            for (int i=0;i<len;i++){                innerText+="*";            }            result=strPrefix+innerText+"@"+str[1];        }        return result;    }    /**     * 混淆手机号     *     * @param mobile 手机号     * @return 混淆结果     */    protected String getSafeMobileString(String mobile) {        String result = "";        int mobileLength = 11;        if (!Strings.isNullOrEmpty(mobile) && mobile.length() == mobileLength) {            result = mobile.replaceAll("(\\d{3})\\d{5}(\\d{3})", "$1*****$2");        }        return result;    }    /**     * 组装返回数据     *     * @param code 响应码     * @param data 响应数据     * @return 封装的响应数据     */    protected Map<String, Object> build(String code, Object data) {        Map<String, Object> responseData = Maps.newHashMap();        responseData.put("code", code);        responseData.put("data", data);        return responseData;    }    /**     * 组装返回错误数据     *     * @param message 错误消息     * @return 封装的响应数据     */    protected Map<String, Object> buildError(String message) {        Map<String, Object> responseData = Maps.newHashMap();        responseData.put("code", "0");        responseData.put("message", message);        return responseData;    }    /**     * 构建校验错误信息     *     * @param result 检验错误结果     * @return 封装的验证失败数据     */    protected String buildValidateJSONError(BindingResult result) {        JSONObject validateErrorJSON = new JSONObject();        for (FieldError fieldError : result.getFieldErrors()) {            validateErrorJSON.put(fieldError.getField(), fieldError.getDefaultMessage());        }        return validateErrorJSON.toJSONString();    }    /**     * 校验手机号     *     * @param mobile 手机号     * @return 校验结果     */    protected boolean isMobile(String mobile) {        if (StringUtils.isBlank(mobile)) {            return false;        }        // 验证手机号 (1开通，11位数字)        return mobile.trim().matches("^1\\d{10}$");    }    /**     * 校验邮箱     *     * @param email 邮箱     * @return 校验结果     */    protected boolean isEmail(String email) {        if (StringUtils.isBlank(email)) {            return false;        }        // 验证邮箱        return email.trim().matches("^([a-z0-9A-Z]+[-|_|\\.]?)+[a-z0-9A-Z]@([a-z0-9A-Z]+(-[a-z0-9A-Z]+)?\\.)+[a-zA-Z]{1,}$");    }    /**     * 获取当前时间String 格式 yyyy-MM-dd HH:mm:ss     *     * @return 当前时间     */    protected String getNowDateTime() {        LocalDateTime now = LocalDateTime.now();        return now.format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));    }    /**     * 获取当天剩余的秒数     *     * @return 秒数     */    protected long getLastSecondsOfDay() {        LocalDateTime midnight = LocalDateTime.now().plusDays(1).withHour(0).withMinute(0).withSecond(0).withNano(0);        return ChronoUnit.SECONDS.between(LocalDateTime.now(), midnight);    }    /**     * 获取用户菜单信息     * @return  用户菜单权限信息列表     */    protected List<PermitBO> getUserMenuVO() {        Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();        if (principal instanceof SystemUserDetailsBO) {            return ((SystemUserDetailsBO) principal).getAdminPermitList();        }        return null;    }}
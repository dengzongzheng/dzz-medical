package com.dzz.medical.controller.system.controller;import com.dzz.medical.common.page.PageUtil;import com.dzz.medical.common.response.ResponseDzz;import com.dzz.medical.controller.system.common.enums.PermitCodeEnum;import com.dzz.medical.controller.system.common.enums.SystemUrlConstants;import com.dzz.medical.controller.system.domain.bo.BsRoleBO;import com.dzz.medical.controller.system.domain.bo.DepartmentBO;import com.dzz.medical.controller.system.domain.bo.ListRoleBO;import com.dzz.medical.controller.system.domain.dto.role.ListRoleQueryDTO;import com.dzz.medical.controller.system.domain.dto.role.RoleAddDTO;import com.dzz.medical.controller.system.domain.dto.role.RoleAddFacadeDTO;import com.dzz.medical.controller.system.service.BsAdminRoleService;import com.dzz.medical.controller.system.service.BsDepartmentService;import com.dzz.medical.controller.util.controller.BaseController;import com.dzz.medical.controller.util.domain.dto.ConstantBean;import java.util.ArrayList;import java.util.List;import org.apache.commons.collections4.CollectionUtils;import org.springframework.beans.BeanUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.access.prepost.PreAuthorize;import org.springframework.stereotype.Controller;import org.springframework.ui.ModelMap;import org.springframework.validation.BindingResult;import org.springframework.validation.annotation.Validated;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.ResponseBody;/** * @author dzz * @since 2017年06月23 下午4:17 * @version 1.0.0 */@Controllerpublic class BsRoleController extends BaseController {    @Autowired    private BsAdminRoleService bsAdminRoleService;    @Autowired    private BsDepartmentService bsDepartmentService;    /**     * 进入角色管理页     * @param map map     * @return 角色管理页面     */    @RequestMapping(value = SystemUrlConstants.ROLE_MANAGE,method = RequestMethod.GET)    @PreAuthorize("hasAuthority('"+ SystemUrlConstants.ROLE_MANAGE+"')")    public String roleManage(ModelMap map) {        Boolean canAddRole=false;        if(getUserRoleType().equals(PermitCodeEnum.RoleType.ADMIN.getCode())){           canAddRole=true;        }        map.put("canAddRole",canAddRole);        return "/system/role/role_manage";    }    /**     * 搜索角色信息     * @param listRoleQueryDTO 角色查询条件     * @return 角色搜索结果     */    @RequestMapping(value = SystemUrlConstants.ROLE_SEARCH,method = RequestMethod.GET)    @ResponseBody    public ResponseDzz<PageUtil<ListRoleBO>> roleSearch(ListRoleQueryDTO listRoleQueryDTO) {        if(!getUserRoleType().equals(PermitCodeEnum.RoleType.ADMIN.getCode())){            listRoleQueryDTO.setDepartmentId(getUserDepartmentId());        }        return bsAdminRoleService.listRole(listRoleQueryDTO);    }    /**     * 进入角色新增页     * @param map map     * @return 角色新增页     */    @RequestMapping(value = SystemUrlConstants.ROLE_ADD,method = RequestMethod.GET)    //@PreAuthorize("hasAuthority('"+ URLConstants.ROLE_ADD+"')")    public String addRole(ModelMap map) {        ResponseDzz<List<DepartmentBO>> departmentsResponseBzn = bsDepartmentService.listDepartment();        map.put("departments", departmentsResponseBzn.getData());        List<ConstantBean> roleTypes = PermitCodeEnum.RoleType.getElementList();        map.put("roleTypes", roleTypes);        return "/system/role/add_role";    }    /**     * 进入角色新增页     * @param roleAddFacadeDTO 角色传输对象     * @return 角色新增     */    @RequestMapping(value = SystemUrlConstants.ROLE_ADD,method = RequestMethod.POST)    //@PreAuthorize("hasAuthority('"+ URLConstants.ROLE_ADD+"')")    @ResponseBody    public ResponseDzz<String> addRole(@Validated @RequestBody RoleAddFacadeDTO roleAddFacadeDTO,                          BindingResult result) {        if (result.hasErrors()) {            return ResponseDzz.fail("参数非法", buildValidateJSONError(result));        }        RoleAddDTO roleAddDTO = new RoleAddDTO();        BeanUtils.copyProperties(roleAddFacadeDTO, roleAddDTO);        roleAddDTO.setUserCode(getUserId());        return bsAdminRoleService.addRole(roleAddDTO);    }    /**     * 获取部门角色信息     * @param departmentId 角色Id     * @return 角色信息     */    @RequestMapping(value = SystemUrlConstants.GET_DEPARTMENT_ROLES,method = RequestMethod.GET)    //@PreAuthorize("hasAuthority('"+ URLConstants.ROLE_ADD+"')")    @ResponseBody    public ResponseDzz selectRoleByDepartmentId(@RequestParam("departmentId") String departmentId) {        ResponseDzz<List<BsRoleBO>> res = bsAdminRoleService                .selectRoleByDepartmentId(departmentId);        //超级管理员不用过滤        if(getUserRoleType()==1){            return res;        }        List<BsRoleBO> list=new ArrayList<>();        //过滤只能添加下级        if(CollectionUtils.isNotEmpty(res.getData())){            int roleType=getUserRoleType();            for(BsRoleBO bo:res.getData()){                if(bo.getRoleType()>roleType){                    list.add(bo);                }            }        }        return ResponseDzz.ok(list);    }}
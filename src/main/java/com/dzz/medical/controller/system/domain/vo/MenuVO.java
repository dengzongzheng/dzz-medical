package com.dzz.medical.controller.system.domain.vo;import java.util.List;import lombok.Data;import lombok.experimental.Accessors;/** * @author dzz * @since  2017年06月17 下午10:35 * @version  1.0.0 */@Data@Accessors(chain=true)public class MenuVO implements Comparable{    /*菜单Id*/    private Integer id;    /*菜单名称*/    private String text;    /*菜单父级Id*/    private Integer parentId;    /*菜单类型1：菜单，2：按钮*/    private Integer menuType;    /*菜单icon*/    private String icon;    /*是否为末级菜单*/    private Integer extremity;    /*排序字段*/    private Integer sortNo;    /*菜单url*/    private String url;    /*子菜单数据*/    private List<MenuVO> children;    /*用于存放tree自定义数据*/    private MenuTreeOthData data;    /*节点状态*/    private State state = new State();    @Data    public class State{       /*是否打开节点*/       private Boolean opened = true;       /*是否可点击*/       private Boolean disabled = false;       /*是否选中*/       private Boolean selected = false;    }    @Override    public int compareTo(Object o) {        MenuVO that = (MenuVO) o;        return this.sortNo > that.sortNo ? 1 : -1;    }    @Override    public boolean equals(Object o) {        if (this == o) return true;        if (o == null || getClass() != o.getClass()) return false;        if (!super.equals(o)) return false;        if (o instanceof MenuVO) {            MenuVO menuVO = (MenuVO) o;            return menuVO.getId().equals(((MenuVO) o).getId());        }else{            return false;        }    }    @Override    public int hashCode() {        int result = super.hashCode();        result = 31 * result + (id != null ? id.hashCode() : 0);        result = 31 * result + (text != null ? text.hashCode() : 0);        result = 31 * result + (data != null ? data.hashCode() : 0);        result = 31 * result + (parentId != null ? parentId.hashCode() : 0);        result = 31 * result + (icon != null ? icon.hashCode() : 0);        result = 31 * result + (extremity != null ? extremity.hashCode() : 0);        result = 31 * result + (sortNo != null ? sortNo.hashCode() : 0);        result = 31 * result + (children != null ? children.hashCode() : 0);        return result;    }}
package com.dzz.medical.controller.system.controller;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONObject;import com.dzz.medical.common.PageUtil;import com.dzz.medical.common.ResponseDzz;import com.dzz.medical.controller.system.common.enums.PermitCodeEnum;import com.dzz.medical.controller.system.common.enums.PermitCodeEnum.RoleType;import com.dzz.medical.controller.system.common.enums.SystemUrlConstants;import com.dzz.medical.controller.system.common.enums.UserConstants;import com.dzz.medical.controller.system.domain.bo.AdminUserDetailBO;import com.dzz.medical.controller.system.domain.bo.BsAdminUserBO;import com.dzz.medical.controller.system.domain.bo.BsAdminUserBelongBO;import com.dzz.medical.controller.system.domain.bo.DepartmentBO;import com.dzz.medical.controller.system.domain.bo.ListUserBO;import com.dzz.medical.controller.system.domain.dto.user.BsUserAddDTO;import com.dzz.medical.controller.system.domain.dto.user.ListUserQueryDTO;import com.dzz.medical.controller.system.domain.dto.user.UpdatePasswordDTO;import com.dzz.medical.controller.system.domain.dto.user.UserAddFacadeDTO;import com.dzz.medical.controller.system.domain.dto.user.UserAuthorizationDTO;import com.dzz.medical.controller.system.domain.dto.user.UserBelongAddDTO;import com.dzz.medical.controller.system.domain.dto.user.UserBelongAddFacadeDTO;import com.dzz.medical.controller.system.domain.dto.user.UserPermitFacadeDTO;import com.dzz.medical.controller.system.domain.dto.user.UserUpdateStatusFacadeDTO;import com.dzz.medical.controller.system.domain.vo.BsMenuVO;import com.dzz.medical.controller.system.service.BsAdminPermitService;import com.dzz.medical.controller.system.service.BsAdminUserService;import com.dzz.medical.controller.system.service.BsDepartmentService;import com.dzz.medical.controller.util.controller.BaseController;import com.dzz.medical.controller.util.domain.dto.ConstantBean;import java.util.Collections;import java.util.List;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.ResponseEntity;import org.springframework.security.access.prepost.PreAuthorize;import org.springframework.stereotype.Controller;import org.springframework.ui.ModelMap;import org.springframework.validation.BindingResult;import org.springframework.validation.annotation.Validated;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.ResponseBody;/** * 用户信息 * * @author dzz * @version 1.0.0 * @since 2017年05月07 下午2:14 */@Controller@Slf4jpublic class BsUserController extends BaseController {    @Autowired    private BsAdminPermitService bsAdminPermitService;    @Autowired    private BsAdminUserService bsAdminUserService;    @Autowired    private BsDepartmentService bsDepartmentService;    /**     * 进入用户管理页     *     * @return 用户管理页面     */    @RequestMapping(value = SystemUrlConstants.USER_MANAGE, method = RequestMethod.GET)    @PreAuthorize("hasAuthority('" + SystemUrlConstants.USER_MANAGE + "')")    public String userManage() {        return "/system/user/user_manage";    }    /**     * 搜索用户信息     *     * @param listUserQueryDTO 用户查询条件     * @return 用户信息     */    @RequestMapping(value = SystemUrlConstants.USER_SEARCH, method = RequestMethod.GET)    @ResponseBody    public ResponseDzz<PageUtil<ListUserBO>> userSearch(ListUserQueryDTO listUserQueryDTO) {        String departmentId = getUserDepartmentId();        Integer roleType = getUserRoleType();        listUserQueryDTO.setCurrentUser(getUserId());        ResponseDzz<PageUtil<ListUserBO>> responseBzn;        if (UserConstants.SUPPER_ADMIN_ROLE_TYPE.equals(roleType.toString())) {            responseBzn = bsAdminUserService.pageListUser(listUserQueryDTO);        } else {            responseBzn = bsAdminUserService.pageListUserByDepartment(listUserQueryDTO, departmentId);        }        return responseBzn;    }    /**     * 进入用户新增页     *     * @param map map     * @return 用户新增页面     */    @RequestMapping(value = SystemUrlConstants.USER_ADD, method = RequestMethod.GET)    public String addUser(ModelMap map) {        if(getUserRoleType()==1) {            ResponseDzz<List<DepartmentBO>> departmentsResponseBzn = bsDepartmentService.listDepartment();            map.put("departments", departmentsResponseBzn.getData());        }else{            ResponseDzz<DepartmentBO> departmentsResponseBzn = bsDepartmentService.getDepartmentByDepartmentId                    (getUserDepartmentId());            map.put("departments", Collections.singleton(departmentsResponseBzn.getData()));        }        List<ConstantBean> roleTypes = PermitCodeEnum.RoleType.getElementList();        map.put("roleTypes", roleTypes);        return "/system/user/add_user";    }    /**     * 进入用户新增页     *     * @param userAddFacadeDTO 用户传输对象     * @return 用户新增页或管理页     */    @RequestMapping(value = SystemUrlConstants.USER_ADD, method = RequestMethod.POST)    @ResponseBody    public ResponseDzz addUser(@Validated @RequestBody UserAddFacadeDTO userAddFacadeDTO,                               BindingResult result, ModelMap map) {        if (result.hasErrors()) {            return ResponseDzz.fail("存在非法参数", buildValidateJSONError(result));        }        ResponseDzz<BsAdminUserBO> userBOResponseBzn = bsAdminUserService.getUserByMail(userAddFacadeDTO.getEmail());        if (userBOResponseBzn.checkSuccess() && null != userBOResponseBzn.getData()) {            return ResponseDzz.fail("用户已经添加过了，不能重复添加", "用户已经添加过了，不能重复添加");        }        ResponseDzz<AdminUserDetailBO> bsAdminUserBOResponseBzn=bsAdminUserService.selectByAccount(userAddFacadeDTO.getAccount());        if (bsAdminUserBOResponseBzn.checkSuccess() && null != bsAdminUserBOResponseBzn.getData()) {            return ResponseDzz.fail("用户已经添加过了，不能重复添加", "用户已经添加过了，不能重复添加");        }        if (!getUserRoleType().equals(RoleType.ADMIN.getCode())) {            if (!getUserDepartmentId().equals(userAddFacadeDTO.getUserBelongAddDTO().getDepartmentId())) {                return ResponseDzz.fail("当前权限只能添加本部门用户", "当前权限只能添加本部门用户");            }        }        BsUserAddDTO bsUserAddDTO = userAddFacadeDTO.convertToBsUserAddDTO();        bsUserAddDTO.setUserCode(getUserId());        return bsAdminUserService.addUser(bsUserAddDTO);    }    /**     * 进入用户归属操作页面     *     * @param map map     * @return 用户归属页面     */    @RequestMapping(value = SystemUrlConstants.TO_USER_BELONG, method = RequestMethod.GET)    public String toUserBelong(ModelMap map, String userId) {        if(getUserRoleType()==1) {            ResponseDzz<List<DepartmentBO>> departmentsResponseBzn = bsDepartmentService.listDepartment();            map.put("departments", departmentsResponseBzn.getData());        }else{            ResponseDzz<DepartmentBO> departmentsResponseBzn = bsDepartmentService.getDepartmentByDepartmentId                    (getUserDepartmentId());            map.put("departments", Collections.singleton(departmentsResponseBzn.getData()));        }        ResponseDzz<AdminUserDetailBO> boResponseBzn = bsAdminUserService.selectByUserId(userId);        AdminUserDetailBO adminUserDetailBO = boResponseBzn.getData();        map.put("user", adminUserDetailBO);        if (adminUserDetailBO.getRoleType().equals(RoleType.MANAGER.getCode())) {        }        return "/system/user/user_belong_manage";    }    /**     * 用户归属管理     *     * @return 用户归属结果     */    @RequestMapping(value = SystemUrlConstants.USER_BELONG, method = RequestMethod.POST)    @ResponseBody    public ResponseDzz<String> userBelong(@RequestBody UserBelongAddFacadeDTO userBelongAddFacadeDTO) {        UserBelongAddDTO userBelongAddDTO = userBelongAddFacadeDTO.convertToUserBelongAddDTO();        userBelongAddDTO.setUserCode(getUserId());        return bsAdminUserService.saveUserAscription(userBelongAddDTO);    }    /**     * 根据部门下指定角色的用户信息     *     * @param departmentId 部门Id     * @param roleType     角色类型     * @return 用户信息     */    @RequestMapping(value = SystemUrlConstants.DEPARTMENT_USERS, method = RequestMethod.GET)    @ResponseBody    public ResponseDzz<List<BsAdminUserBelongBO>> getUserByDepartmentAndRoleType(            @RequestParam("departmentId") String departmentId,            @RequestParam("roleType") Integer roleType,            @RequestParam(value = "userId") String userId) {        return bsAdminUserService.selectConfigurableUserBelong(departmentId, roleType, userId);    }    /**     * 根据部门下指定角色的用户信息     *     * @param departmentId 部门Id     * @param roleType     角色类型     * @return 用户信息     */    @RequestMapping(value = SystemUrlConstants.DEPARTMENT_ALL_USERS, method = RequestMethod.GET)    @ResponseBody    public ResponseDzz<List<BsAdminUserBO>> getUserByDepartmentAndRoleType(            @RequestParam("departmentId") String departmentId,            @RequestParam("roleType") Integer roleType) {        return bsAdminUserService.selectConfigurableUser(departmentId, roleType);    }    /**     * 进入用户授权页     *     * @param map map     * @return 用户授权页     */    @RequestMapping(value = SystemUrlConstants.USER_MENU_PERMIT, method = RequestMethod.GET)    public String userMenuPermit(String userId, String userName, ModelMap map) {        List<BsMenuVO> menuVOList = bsAdminPermitService.listMenu(userId);        map.put("menuTree", JSON.toJSONString(menuVOList));        map.put("userId", userId);        map.put("userName", userName);        return "/system/user/user_menu_permit";    }    /**     * 用户授权     *     * @param userPermitFacadeDTO 用户菜单权限实体     * @param map                 map     * @return 用户管理页     */    @RequestMapping(value = SystemUrlConstants.USER_MENU_PERMIT, method = RequestMethod.POST)    @ResponseBody    public ResponseDzz<String> userMenuPermit(@RequestBody UserPermitFacadeDTO userPermitFacadeDTO, ModelMap map) {        log.info("接收到的授权信息：{}", userPermitFacadeDTO.toString());        UserAuthorizationDTO userAuthorizationDTO = userPermitFacadeDTO.convertToUserAuthorizationDTO();        userAuthorizationDTO.setUserCode(getUserId());        return bsAdminUserService.authorizeUser(userAuthorizationDTO);    }    /**     * 修改密码     *     * @param updatePwdDTO 修改密码传输实体     * @return 密码修改结果     */    @RequestMapping(value = SystemUrlConstants.USER_UPDATE_PASSWORD,            method = RequestMethod.POST, produces = "application/json; charset=utf-8")    @ResponseBody    public ResponseEntity<?> updatePassword(@RequestBody UpdatePasswordDTO updatePwdDTO) {        ResponseDzz<AdminUserDetailBO> boResponseBzn = bsAdminUserService.selectByUserId(getUserId());        /*比对原始密码是否正确*/        String originPassword = boResponseBzn.getData().getPassword();        if(!bsAdminUserService.checkPassword(updatePwdDTO.getOldPassword(),getUserAccount(),originPassword).getData()){            JSONObject jsonObject = new JSONObject();            jsonObject.put("oldPassword", "原始密码不正确");            return ResponseEntity.ok(ResponseDzz.build("0", "原始密码不正确", jsonObject));        }        return ResponseEntity.ok(ResponseDzz                .ok(bsAdminUserService.updatePassword(getUserId(), updatePwdDTO.getPassword())));    }    /**     * 更新用户状态     *     * @param userUpdateStatusFacadeDTO 用户状态信息     * @return 更新用户状态结果     */    @RequestMapping(value = SystemUrlConstants.USER_UPDATE_STATUS, method = RequestMethod.POST)    @ResponseBody    public ResponseEntity<?> updateUserStatus(@RequestBody UserUpdateStatusFacadeDTO userUpdateStatusFacadeDTO) {        return ResponseEntity.ok(ResponseDzz.ok(bsAdminUserService                .updateUserStatus(userUpdateStatusFacadeDTO.getStatus(), userUpdateStatusFacadeDTO.getUserId()                        , getUserId())));    }}